services:
  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway-service
      target: development
    ports:
      - "8000:8000"
    restart: always
    command: >
        sh -c "
        npm start
        "
    depends_on:
      - rabbitmq
    networks:
      - service-gateway
      - postgres-db
      - mongo-db
    environment:
      RABBITMQ_URL: "guest:guest@rabbitmq:5672"
      RABBITMQ_FLIGHT_QUEUE: "flightQueue"
      RABBITMQ_USER_QUEUE: "userQueue"
      RABBITMQ_AUTH_QUEUE : 'authQueue'
      RABBITMQ_HOTEL_QUEUE : 'hotelQueue'

  auth-service:
    container_name: auth-microservice
    build:
      context: ./Micro-services/auths-service
      target: development
    ports:
      - "8001:8001"
    restart: on-failure
    depends_on:
      - postgres-db
      - api-gateway
    networks:
      - postgres-db
      - service-gateway
      - rabbitmq
    command: >
        sh -c "
        npx prisma migrate deploy &&
        npx prisma generate &&
        npm start 
        "
    environment:
      DATABASE_URL: "postgresql://guest:guest@postgres-db:5432/travel"
      RABBITMQ_URL: "guest:guest@rabbitmq:5672"
      RABBITMQ_AUTH_QUEUE : 'authQueue'
      RABBITMQ_HOTEL_QUEUE : 'userQueue'

  user-service:
    container_name: user-microservice
    build:
      context: ./Micro-services/users-service
      target: development
    ports:
      - "8002:8002"
    restart: on-failure
    depends_on:
      - postgres-db
      - auth-service
      - api-gateway
    networks:
      - postgres-db
      - service-gateway
      - rabbitmq
    command: >
        sh -c  "     
        npx prisma migrate deploy &&
        npx prisma generate && 
        npm start
        "
    environment:
      DATABASE_URL: "postgresql://guest:guest@postgres-db:5432/travel"
      RABBITMQ_URL: "guest:guest@rabbitmq:5672"
      RABBITMQ_AUTH_QUEUE : 'authQueue'
      RABBITMQ_USER_QUEUE : 'userQueue'

  hotel-service:
    container_name: hotel-microservice
    build:
      context: ./Micro-services/hotels-service
      target: development
    ports:
      - "8003:8003"
    restart: on-failure
    depends_on:
      - mongo-db
      - user-service
      - auth-service
      - api-gateway
    networks:
      - mongo-db
      - service-gateway
      - rabbitmq
    environment:
      MONGODB_URL: "mongodb://root:example@mongo-db:27017/"
      RABBITMQ_URL: "guest:guest@rabbitmq:5672"
      RABBITMQ_AUTH_QUEUE : 'authQueue'
      RABBITMQ_HOTEL_QUEUE : 'hotelQueue'

  flight-service:
    container_name: flight-microservice
    build:
      context: ./Micro-services/flights-service
      target: development
    ports:
      - "8004:8003"
    restart: on-failure
    depends_on:
      - user-service
      - mongo-db
      - auth-service
      - api-gateway
      - rabbitmq
    networks:
      - mongo-db
      - service-gateway
      - rabbitmq
    environment:
      MONGODB_URL: "mongodb://root:example@mongo-db:27017/"
      RABBITMQ_URL: "guest:guest@rabbitmq:5672"
      RABBITMQ_AUTH_QUEUE : 'authQueue'
      RABBITMQ_FLIGHT_QUEUE : 'flightQueue'

  postgres-db:
    image: "postgres"
    restart: "always"
    networks:
      - "postgres-db"
    expose:
      - "5432"
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: "guest"
      POSTGRES_PASSWORD: "guest"
      POSTGRES_DB: "travel"

  mongo-db:
    image: mongo
    restart: always
    networks:
      - mongo-db
    expose:
      - "27017"
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
        MONGO_INITDB_ROOT_USERNAME: root
        MONGO_INITDB_ROOT_PASSWORD: example

  rabbitmq:
    image: rabbitmq:latest
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    expose:
      - "5672"
      - "15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq  # Volume for RabbitMQ data
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    networks:
      - rabbitmq
      
networks:
  service-gateway:
  postgres-db:
  mongo-db:
  rabbitmq:

volumes:
  postgres:
  mongo_data:
  rabbitmq_data:

